#
X = as.matrix(db_quant[, which(!(colnames(db_quant) %in% c("ID", "set", "PMI", "group", "K.Mm.")))])
Y = dummies::dummy(as.character(db_quant$group))
out <- computePower(X, Y, A = 3, scaling = FALSE,
post.transformation = TRUE,
seed = 123, n = nrow(X),
Nsim = 100, nperm = 1000, alpha = 0.05)
A
A = 3
scaling = FALSE
post.transformation = TRUE
seed = 123
n = nrow(X)
Nsim = 100
nperm = 1000
alpha = 0.05
outPLS <- PLSc(X = X, Y = Y, A = A,
scaling = scaling,
post.transformation = post.transformation)
pw <- 0
i
i =1
#Model the distribution of the X-data
outsim <- sim_XY(outPLS, n = n, seed = seed,
post.transformation = post.transformation, A = A)
out = outPLS
post.transformation
M <- out$M
M
T_score <- out$T.score
X_loading <- out$X.loading
Y_loading <- out$Y.loading
B <- out$B
A == M
T_scoreO <- T_score[,1:M]
T_scoreP <- T_score[,((M+1):A)]
sim_TO <- unlist(sapply(seq(ncol(T_scoreO)), function(x) simulate_kde(x = T_scoreO[,x], n = n)$random.values))
sim_TP <- unlist(sapply(seq(ncol(T_scoreP)), function(x) simulate_kde(x = T_scoreP[,x], n = n)$random.values))
T_sim <- cbind(sim_TO, sim_TP) #T target
T_sim
t(T_score)
T_sim
sim_TO
sim_TP
T_scoreP
((M+1):A)
T_scoreP <- matrix(T_score[,((M+1):A)], ncol = ncol(T_score[,((M+1):A)]))
ncol(T_score[,((M+1):A)])
if(is.null(ncol(T_score[,((M+1):A)]))){
nc <- 1
}else{
nc <- ncol(T_score[,((M+1):A)])
}
T_scoreP <- matrix(T_score[,((M+1):A)], ncol = nc)
sim_TO <- unlist(sapply(seq(ncol(T_scoreO)), function(x) simulate_kde(x = T_scoreO[,x], n = n)$random.values))
sim_TP <- unlist(sapply(seq(ncol(T_scoreP)), function(x) simulate_kde(x = T_scoreP[,x], n = n)$random.values))
sim_TP
T_sim <- cbind(sim_TO, sim_TP) #T target
out1 <- svd(T_sim %*% t(T_score) %*% T_score)
#
# X <- matrix(rnorm(50*200), ncol = 200)
# X[,1:100] <- X[,1:100] + matrix(rgamma(50*100, shape = 1), ncol = 100)
# Y <- matrix(sample(c(1:2), size = 50,replace = T), ncol = 1)
# Y <- matrix(dummies::dummy(Y), ncol =2)
rm(list = ls())
library(xlsx)
library(powerPLS)
db_quant <- read.xlsx("C:/Users/Angela Andreella/Documents/Post_Doc/Padova/PLS_hierarchical/PLS/data/dataset_umor_acqueo.xlsx",sheetIndex = 1,startRow = 2)
#
X = as.matrix(db_quant[, which(!(colnames(db_quant) %in% c("ID", "set", "PMI", "group", "K.Mm.")))])
Y = dummies::dummy(as.character(db_quant$group))
out <- computePower(X, Y, A = 3, scaling = FALSE,
post.transformation = TRUE,
seed = 123, n = nrow(X),
Nsim = 100, nperm = 1000, alpha = 0.05)
library(powerPLS)
pv <- eigenTest(X = X, Y = Y, A = 4, nperm = 900,
scaling = FALSE)
out <- computePower(X, Y, A = 3, scaling = FALSE,
post.transformation = TRUE,
seed = 123, n = nrow(X),
Nsim = 100, nperm = 1000, alpha = 0.05)
out
out <- computePower(X, Y, A = 3, scaling = FALSE,
post.transformation = TRUE,
seed = 123, n = nrow(X),
Nsim = 100, nperm = 1000, alpha = 0.01)
out
pnorm(9.75, mean = 1/0.11, sd = sqrt(1/(175*0.11^2)),lower.tail = FALSE)
load("~/Papers/sumSome_pARI_SIS2023/output/res_pARI1.RData")
View(out1)
View(out5)
library(caret)
out <- twoClassSim(n = 100, intercept = -5,
linearVars = 10, noiseVars = 0, corrVars = 0,
corrType = "AR1", corrValue = 0, mislabel = 0)
str(out)
hist(out$TwoFactor1)
hist(out$TwoFactor2)
out <- twoClassSim(n = 100,
intercept = -10, #The intercept, which controls the class balance. The default value produces a roughly balanced data set when the other defaults are used.
linearVars = 10,
noiseVars = 2, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 0)
hist(out$TwoFactor2)
hist(out$TwoFactor1)
out <- twoClassSim(n = 100,
intercept = 0, #The intercept, which controls the class balance. The default value produces a roughly balanced data set when the other defaults are used.
linearVars = 10,
noiseVars = 2, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 0)
hist(out$TwoFactor1)
hist(out$TwoFactor2)
str(out)
table(out$Class)
out <- twoClassSim(n = 100,
intercept = -5, #The intercept, which controls the class balance. The default value produces a roughly balanced data set when the other defaults are used.
linearVars = 10,
noiseVars = 2, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 0)
table(out$Class)
out <- twoClassSim(n = 100,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 2, #The number of linearly important effects.
noiseVars = 2, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 0) #The proportion of data that is possibly mislabeled.
str(out)
splom(~out[, 1:6], groups = out$Class)
out <- twoClassSim(n = 100,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 1, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 0) #The proportion of data that is possibly mislabeled.
str(out)
splom(~out[, 1:6], groups = out$Class)
splom(~out[, -c("Class")], groups = out$Class)
splom(~out[, c(1:(ncol(out)-1))], groups = out$Class)
splom(~out[, 1], groups = out$Class)
plot(out$TwoFactor1, col = out$Class)
plot(out$Linear1, col = out$Class)
plot(out$TwoFactor1, col = out$Class)
out <- twoClassSim(n = 100,
intercept = -10, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 1, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 0) #The proportion of data that is possibly mislabeled.
plot(out$TwoFactor1, col = out$Class)
out <- twoClassSim(n = 100,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 1, #The number of linearly important effects.
noiseVars = 2, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 0) #The proportion of data that is possibly mislabeled.
plot(out$TwoFactor1, col = out$Class)
out <- twoClassSim(n = 100,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 1, #The number of linearly important effects.
noiseVars = 6, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 0) #The proportion of data that is possibly mislabeled.
plot(out$TwoFactor1, col = out$Class)
out <- twoClassSim(n = 100,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 1, #The number of linearly important effects.
noiseVars = 10, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 0) #The proportion of data that is possibly mislabeled.
plot(out$TwoFactor1, col = out$Class)
out <- twoClassSim(n = 100,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 1, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 0) #The proportion of data that is possibly mislabeled.
plot(out$TwoFactor1, col = out$Class)
out <- twoClassSim(n = 100,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 4, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 0) #The proportion of data that is possibly mislabeled.
plot(out$TwoFactor1, col = out$Class)
out <- twoClassSim(n = 100,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 5, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 0) #The proportion of data that is possibly mislabeled.
plot(out$TwoFactor1, col = out$Class)
out <- twoClassSim(n = 100,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 5, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 0) #The proportion of data that is possibly mislabeled.
plot(out$TwoFactor1, col = out$Class)
out <- twoClassSim(n = 100,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 5, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 0) #The proportion of data that is possibly mislabeled.
plot(out$TwoFactor1, col = out$Class)
out <- twoClassSim(n = 100,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 6) #The proportion of data that is possibly mislabeled.
plot(out$TwoFactor1, col = out$Class)
out <- twoClassSim(n = 100,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 50) #The proportion of data that is possibly mislabeled.
plot(out$TwoFactor1, col = out$Class)
out <- twoClassSim(n = 100,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 50) #The proportion of data that is possibly mislabeled.
plot(out$TwoFactor1, col = out$Class)
out <- twoClassSim(n = 100,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 0) #The proportion of data that is possibly mislabeled.
plot(out$TwoFactor1, col = out$Class)
out <- twoClassSim(n = 100,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 0) #The proportion of data that is possibly mislabeled.
out <- twoClassSim(n = 30,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 0) #The proportion of data that is possibly mislabeled.
plot(out$TwoFactor1, col = out$Class)
out <- twoClassSim(n = 30,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 5) #The proportion of data that is possibly mislabeled.
plot(out$TwoFactor1, col = out$Class)
out <- twoClassSim(n = 30,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0.5, #The correlation value.
mislabel = 0) #The proportion of data that is possibly mislabeled.
plot(out$TwoFactor1, col = out$Class)
out <- twoClassSim(n = 30,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0.8, #The correlation value.
mislabel = 0) #The proportion of data that is possibly mislabeled.
plot(out$TwoFactor1, col = out$Class)
out <- twoClassSim(n = 30,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0.8, #The correlation value.
mislabel = 0) #The proportion of data that is possibly mislabeled.
plot(out$TwoFactor1, col = out$Class)
out <- twoClassSim(n = 30,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0.8, #The correlation value.
mislabel = 0) #The proportion of data that is possibly mislabeled.
plot(out$TwoFactor1, col = out$Class)
out <- twoClassSim(n = 30,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0.8, #The correlation value.
mislabel = 0) #The proportion of data that is possibly mislabeled.
plot(out$TwoFactor1, col = out$Class)
out <- twoClassSim(n = 30,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0.8, #The correlation value.
mislabel = 0) #The proportion of data that is possibly mislabeled.
plot(out$TwoFactor1, col = out$Class)
out <- twoClassSim(n = 30,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0.8, #The correlation value.
mislabel = 0.5) #The proportion of data that is possibly mislabeled.
plot(out$TwoFactor1, col = out$Class)
splom(~out[, c(1:(ncol(out)-1))], groups = out$Class)
out <- twoClassSim(n = 30,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0.8, #The correlation value.
mislabel = 0.9) #The proportion of data that is possibly mislabeled.
splom(~out[, c(1:(ncol(out)-1))], groups = out$Class)
out <- twoClassSim(n = 30,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0.8, #The correlation value.
mislabel = 0.1) #The proportion of data that is possibly mislabeled.
splom(~out[, c(1:(ncol(out)-1))], groups = out$Class)
out <- twoClassSim(n = 30,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0.8, #The correlation value.
mislabel = 0.5) #The proportion of data that is possibly mislabeled.
splom(~out[, c(1:(ncol(out)-1))], groups = out$Class)
out <- twoClassSim(n = 30,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0.8, #The correlation value.
mislabel = 0.6) #The proportion of data that is possibly mislabeled.
splom(~out[, c(1:(ncol(out)-1))], groups = out$Class)
out <- twoClassSim(n = 30,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0.8, #The correlation value.
mislabel = 0.7) #The proportion of data that is possibly mislabeled.
splom(~out[, c(1:(ncol(out)-1))], groups = out$Class)
out <- twoClassSim(n = 30,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0.8, #The correlation value.
mislabel = 0.8) #The proportion of data that is possibly mislabeled.
splom(~out[, c(1:(ncol(out)-1))], groups = out$Class)
out <- twoClassSim(n = 30,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0.8, #The correlation value.
mislabel = 0.9) #The proportion of data that is possibly mislabeled.
out <- twoClassSim(n = 30,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 0.9) #The proportion of data that is possibly mislabeled.
splom(~out[, c(1:(ncol(out)-1))], groups = out$Class)
out <- twoClassSim(n = 30,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 0.1) #The proportion of data that is possibly mislabeled.
splom(~out[, c(1:(ncol(out)-1))], groups = out$Class)
out <- twoClassSim(n = 30,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 0.5) #The proportion of data that is possibly mislabeled.
splom(~out[, c(1:(ncol(out)-1))], groups = out$Class)
table(out$Class)
out <- twoClassSim(n = 30,
intercept = -5, #The intercept, which controls the class balance. The default value (5) produces a roughly balanced data set when the other defaults are used.
linearVars = 0, #The number of linearly important effects.
noiseVars = 0, #The number of uncorrelated irrelevant predictors to be included.
corrVars = 0, #The number of correlated irrelevant predictors to be included.
corrType = "AR1", #The correlation structure of the correlated irrelevant predictors.
corrValue = 0, #The correlation value.
mislabel = 0.9) #The proportion of data that is possibly mislabeled.
table(out$Class)
Voto = c(25,22,24,23,26,23,21,27,23,21)
Studente = seq(10)
var(db$Voto)
db <- data.frame(Studente = seq(n),
Voto = voto)
n = 10
voto = c(25,22,24,23,26,23,21,27,23,21)
var(voto)
voto = c(26,22,24,23,26,23,21,27,23,21)
var(voto)
n = 10
db <- data.frame(Studente = seq(n),
Voto = voto)
alpha = 0.1
mean(db$Voto)
qt(alpha/2, n-1)
qt(alpha/2, n-1)*sqrt(var(db$Voto)/n)
23.6 - 1.22817
possible_x <- sample(-5:5, 1)
possible_x
sum_eventi <- expand.grid(1:6, 1:6)
sum_eventi[ ,3] <- sum_eventi[, 1] - sum_eventi[, 2]
round(sum(sum_eventi[,3] == 3)/36 ,3)
pbinom(4, n = 10, p = 0.4)
pbinom(4, size = 10, p = 0.4)
dbinom(4, size = 10, p = 0.4)
pt(1.993, 7-1)
(1-pt(1.993, 7-1))*2
voto = c(21,34,24,19,24,24,20,21,26,26)
mean(voto) + qt(0.05, 9)*sqrt(18.544444/10)
17.5*1.45
22*1.45
22*1.5
require(sanssouci)
setwd("C:/Users/Andreella/Documents/Papers/sumSome_pARI_SIS2023/data/")
load("gene_db.RData")
groups <- ifelse(as.numeric(as.factor(labels)) == 1, 0, 1) # map to 0/1
obj <- SansSouci(Y = expr, groups = groups)
res <- fit(obj, alpha = 0.05, B = 1000)
out <- c()
time1 <-system.time(
for(i in seq(pathways)){
S <- which(rownames(expr) %in% pathways[[i]])
out[i] <- predict(res, S)[1]/length(S)
})
db <- data.frame(TDP = round(out,5),
pathways = names(pathways))
S <- seq(nrow(expr))
predict(res, S)[1]/length(S)
save(db, time1, file="C:/Users/Andreella/Documents/Papers/sumSome_pARI_SIS2023/output/res_sansouci.RData")
