#' @title randomization test
#' @description Performs randomization test based on eigenvalues
#' @usage eigenTest(X, Y, A, nperm, A, scaling, post.transformation)
#' @param X data matrix where columns represent the \eqn{p} classes and rows the \eqn{n} observations.
#' @param Y data matrix where columns represent the \eqn{k} variables and rows the \eqn{n} observations.
#' @param nperm number of permutations
#' @param A number of components
#' @param post.transformation TRUE if you want to apply post transformation.
#' @author Angela Andreella
#' @return Returns the corresponding pvalues
#' @importFrom compositions clrInv
#' @importFrom compositions clr


eigenTest <- function(X, Y, nperm, A, scaling){


  Y <- matrix(as.numeric(clrInv(Y)), ncol = ncol(Y))

  Y <- clr(Y)

  Y <- t(apply(Y, 1, scale))

  n <- nrow(Y)
  E <- list()
  R <- R.p <- list()
  eigen.o <- list()
  w.p <- w <- list()
  r.p <- r <- list()
  Q <- list()
  pv <- c()
  eigen.p <- matrix(NA, ncol = nperm, nrow = A)

  E[[1]] <- X
  R[[1]] <- Y

  for(a in seq(A)){

    #Compute weight matrix
    out <- eigen(t(E[[a]]) %*% R[[a]] %*% t(R[[a]]) %*% E[[a]]) #well defined eigenvalue problem
    w[[a+1]] <- Re(out$vectors[,1])

   # w[[a+1]] <- (t(E[[a]]) %*% R[[a]])/(t(R[[a]] )%*% E[[a]] %*% t(E[[a]]) %*% R[[a]])[1]^(-1/2)
    r[[a+1]] <- E[[a]] %*% w[[a+1]]

    eigen.o[[a]] <- ((t(r[[a+1]]) %*% R[[a]])^2)[1]

    for(p in seq(nperm)){

      R.p[[p]] <- permuteIndex(R[[a]], by.row = TRUE, times = nrow(R[[a]]))
      out <- eigen(t(E[[a]]) %*% R.p[[p]] %*% t(R.p[[p]]) %*% E[[a]])
      w.p[[p]] <- Re(out$vectors[,1])
     # w.p[[p]] <- (t(E[[a]]) %*% R.p[[p]])/(t(R.p[[p]] )%*% E[[a]] %*% t(E[[a]]) %*%R.p[[p]])[1]^(-1/2)

      r.p[[p]] <- E[[a]] %*% w.p[[p]]

      eigen.p[a,p] <- ((t(r.p[[p]]) %*% R.p[[p]])^2)[1]

    }

    pv[a] <- (sum(eigen.p[a,] >= eigen.o[a]) + 1)/(nperm + 1)

    Q[[a+1]] <- diag(n) - r[[a+1]] %*% solve(t(r[[a+1]]) %*% r[[a+1]]) %*% t(r[[a+1]])
   # Q[[a+1]] <- diag(n) - r[[a+1]] %*% t(r[[a+1]])/ (t(r[[a+1]]) %*% r[[a+1]])[1]
    #Deflation step
    #X-deflation step
    E[[a+1]] <- Q[[a+1]] %*% E[[a]] #residual matrix X
    #Y-deflation step
    R[[a+1]] <- Q[[a+1]] %*% R[[a]] #residual matrix Y
  }

  pv_adj <- sapply(c(1:A), function(x) max(pv[1:x]))

return(pv)
}
